Exercise 2: E-commerce Platform Search Function
Scenario: 
You are working on the search functionality of an e-commerce platform. The search needs to be optimized for fast performance.
Steps:
1.	Understand Asymptotic Notation:
Explain Big O notation and how it helps in analyzing algorithms.
Describe the best, average, and worst-case scenarios for search operations.
2.	Setup:
Create a class Product with attributes for searching, such as productId, productName, and category.
3.	Implementation:
Implement linear search and binary search algorithms.
Store products in an array for linear search and a sorted array for binary search.
4.	Analysis:
Compare the time complexity of linear and binary search algorithms.
Discuss which algorithm is more suitable for your platform and why.


Step 1: Understand Asymptotic Notation
Before we start coding, let’s talk about Big O notation.
It’s a way to measure how fast or slow an algorithm is based on the size of the input. We usually look at:
Best Case – The quickest scenario (like finding the product at the first position).
Average Case – What usually happens in the middle.
Worst Case – The slowest case (like checking every product) Finding answer at the end.
Search Method	Best Case	Average Case	Worst Case
Linear Search	  O(1)	           O(n)	           O(n)
Binary Search	  O(1)	         O(log n)	 O(log n)
So clearly, binary search is usually faster — but it only works if the data is sorted.


Step 2: Setup
First, we need a Product class that stores each product’s details like ID, name, and category:
public class Product 
{
    int productId;
    String productName;
    String category;

    public Product(int productId, String productName, String category) 
    {
        this.productId = productId;
        this.productName = productName;
        this.category = category;
    }
}


Step 3: Implementation
Let’s write two methods:
One for linear search (checking one by one)
Another for binary search (dividing the array and searching easily)
public class SearchDemo 
{
    public static int linearSearch(Product[] products, int targetId) 
    {
        for (int i = 0; i < products.length; i++) 
        {
            if (products[i].productId == targetId) return i;
        }
        return -1;
    }
    public static int binarySearch(Product[] products, int targetId) 
    {
        int low = 0, high = products.length - 1;
        while (low <= high) 
        {
            int mid = (low + high) / 2;
            if (products[mid].productId == targetId) return mid;
            else if (products[mid].productId < targetId) low = mid + 1;
            else high = mid - 1;
        }
        return -1;
    }
    public static void main(String[] args) 
    {
        Product[] products = 
        {
            new Product(105, "Shoes", "Footwear"),
            new Product(101, "Mobile", "Electronics"),
            new Product(103, "T-Shirt", "Clothes"),
            new Product(102, "Watch", "Accessories"),
            new Product(104, "Laptop", "Electronics")
        };
        int idToFind = 103;
        int result = linearSearch(products, idToFind);
        System.out.println("Linear Search: Found at index " + result);
        Arrays.sort(products, Comparator.comparingInt(p -> p.productId));
        result = binarySearch(products, idToFind);
        System.out.println("Binary Search: Found at index " + result);
    }
}


Step 4: Analysis
Search Type	Performance	             When to Use
Linear	        Slower (O(n))	        When data is small or unsorted
Binary	        Faster (O(log n))	When data is sorted
For an e-commerce site, we usually want speed, so binary search is better. In real-world applications, we often use indexes or database search tools which are optimized even more.















