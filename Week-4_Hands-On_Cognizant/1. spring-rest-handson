Hands on 1
Create a Spring Web Project using Maven 

Follow steps below to create a project: 
 
1.	Go to https://start.spring.io/
2.	Change Group as “com.cognizant”
3.	Change Artifact Id as “spring-learn”
4.	Select Spring Boot DevTools and Spring Web
5.	Create and download the project as zip
6.	Extract the zip in root folder to Eclipse Workspace
7.	Build the project using ‘mvn clean package -Dhttp.proxyHost=proxy.cognizant.com -Dhttp.proxyPort=6050 -Dhttps.proxyHost=proxy.cognizant.com -Dhttps.proxyPort=6050 -Dhttp.proxyUser=123456’ command in command line
8.	Import the project in Eclipse "File > Import > Maven > Existing Maven Projects > Click Browse and select extracted folder > Finish"
9.	Include logs to verify if main() method of SpringLearnApplication.
10.	Run the SpringLearnApplication class.

SME to walk through the following aspects related to the project created:
1.	src/main/java - Folder with application code
2.	src/main/resources - Folder for application configuration
3.	src/test/java - Folder with code for testing the application
4.	SpringLearnApplication.java - Walkthrough the main() method.
5.	Purpose of @SpringBootApplication annotation
6.	pom.xml
1.	Walkthrough all the configuration defined in XML file
2.	Open 'Dependency Hierarchy' and show the dependency tree.




1. src/main/java
This is where your business logic and controller code lives.
Your package com.cognizant.springlearn will be here with the SpringLearnApplication class inside.

 2. src/main/resources
This folder holds configuration files like:
application.properties
Static files (HTML, CSS, JS)
Templates (like Thymeleaf, if used)

3. src/test/java
This is for writing unit tests or integration tests.
Spring Boot generates a basic test class here by default.

 4. SpringLearnApplication.java
This is the entry point of the application:

@SpringBootApplication
public class SpringLearnApplication {
   public static void main(String[] args) {
      SpringApplication.run(SpringLearnApplication.class, args);
   }
}
When you run this, it:
Starts the Spring Boot application
Initializes the embedded Tomcat server
Loads the Spring Context

5. @SpringBootApplication Annotation
This is a shortcut for:
@Configuration – marks class as config source
@EnableAutoConfiguration – auto config based on dependencies
@ComponentScan – scans the current package for components (beans, services, controllers)

6. pom.xml
This is the Project Object Model file where all dependencies and build info are defined.
Includes dependencies like:
xml
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-web</artifactId>
</dependency>
Plugin section defines how the project will be packaged.
Properties like Java version, Spring Boot version, etc.

Dependency Hierarchy
In Eclipse:
Right-click on the project → Maven → Show Dependency Hierarchy
This shows:
Direct dependencies (Spring Boot Web, DevTools)
Transitive dependencies (like Jackson, Tomcat, etc.)
Helps resolve version conflicts or understand what libraries are included
