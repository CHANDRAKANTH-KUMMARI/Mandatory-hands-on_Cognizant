Objectives

•	Explain React components
•	Identify the differences between components and JavaScript functions
•	Identify the types of components
•	Explain class component
•	Explain function component
•	Define component constructor
•	Define render() function

In this hands-on lab, you will learn how to:
•	Create a class component
•	Create multiple components
•	Render a component
Prerequisites

The following is required to complete this hands-on lab:
•	Node.js
•	NPM
•	Visual Studio Code

Notes

Estimated time to complete this lab: 30 minutes.
Create a react app for Student Management Portal named StudentApp and create a component named Home which will display the Message “Welcome to the Home page of Student Management Portal”. Create another component named About and display the Message “Welcome to the About page of the Student Management Portal”. Create a third component named Contact and display the Message “Welcome to the Contact page of the Student Management Portal”. Call all the three components.
1.	Create a React project named “StudentApp” type the following command in terminal of Visual studio:
2.	Create a new folder under Src folder with the name “Components”. Add a new file named “Home.js”
3.	Type the following code in Home.js
4.	Under Src folder add another file named “About.js”
5.	Repeat the same steps for Creating “About” and  “Contact” component by adding a new file as ”About.js”, “Contact.js” under “Src” folder and edit the code as mentioned for “Home” Component.
6.	Edit the App.js to invoke the Home, About and Contact component as follows:
7.	In command Prompt, navigate into StudentApp and execute the code by typing the following command:


React Project: Student Management Portal

You will build a simple React app named StudentApp with three components: Home, About, and Contact.

Each component will display a welcome message. You will render all three components from App.js.
1. Explain what React components are
React components are the building blocks of a React application. They are reusable pieces of UI that can display data and handle user interactions. A component can be as simple as a button or as complex as a whole page.

2. Understand the difference between components and regular JavaScript functions
A regular JavaScript function just performs a task or calculation.
A React component (which can be written as a function) returns JSX — a special syntax that looks like HTML and is used to define UI elements. Components are meant to display content and interact with users.

3. Identify the types of React components
There are two main types of React components:

Function components – Simple and modern way to create components using JavaScript functions.

Class components – Older method that uses ES6 classes and includes features like state and lifecycle methods.

4. Explain how a class component works
A class component is a JavaScript class that extends React.Component. It must include a render() method, which returns JSX. It can also use state and lifecycle methods to manage data and handle different stages of the component's life.

5. Explain how a function component works
A function component is a regular JavaScript function that returns JSX. It is used to render UI and can use React Hooks (like useState and useEffect) to manage state and side effects.

6. Define what a component constructor is in a class component
The constructor is a special function in a class component that is called when the component is created. It’s used to set up initial state or bind methods. It is defined using constructor(props) and usually starts with super(props).

7. Define the purpose of the render() function in class components
The render() function is a required method in class components. It returns the JSX that defines what should appear on the screen. Whenever the component's state or props change, render() is called again to update the UI.


Step-by-step Instructions

Step 1: Create a new React project
Open Visual Studio Code terminal and run this command:



npx create-react-app StudentApp
This will create a new folder named StudentApp with the base React setup.

Step 2: Create a new folder for components
Inside the src folder, create a new folder named Components.

Step 3: Create Home.js component

Inside the Components folder, create a new file named Home.js and add the following code:


import React from 'react';

function Home() {
  return (
    <div>
      <h2>Welcome to the Home page of Student Management Portal</h2>
    </div>
  );
}

export default Home;
Step 4: Create About.js component

In the same Components folder, create a new file named About.js and add the following code:


import React from 'react';

function About() {
  return (
    <div>
      <h2>Welcome to the About page of the Student Management Portal</h2>
    </div>
  );
}

export default About;
Step 5: Create Contact.js component

Create one more file in the Components folder named Contact.js and add this code:

javascript
import React from 'react';

function Contact() {
  return (
    <div>
      <h2>Welcome to the Contact page of the Student Management Portal</h2>
    </div>
  );
}

export default Contact;
Step 6: Edit App.js to render the components

Now open the App.js file inside the src folder and replace the code with this:

javascript

import React from 'react';
import Home from './Components/Home';
import About from './Components/About';
import Contact from './Components/Contact';

function App() {
  return (
    <div>
      <Home />
      <About />
      <Contact />
    </div>
  );
}

export default App;
Step 7: Run the project

cd StudentApp
npm start
