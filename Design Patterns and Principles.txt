Exercise 1: Implementing the Singleton Pattern

SINGLETON PATTERN:

Exercise 1: Implementing the Singleton Pattern
Scenario: 
You need to ensure that a logging utility class in your application has only one instance throughout the application lifecycle to ensure consistent logging.
Steps:
1.	Create a New Java Project:
Create a new Java project named SingletonPatternExample.
2.	Define a Singleton Class:
Create a class named Logger that has a private static instance of itself.
Ensure the constructor of Logger is private.
Provide a public static method to get the instance of the Logger class.
3.	Implement the Singleton Pattern:
Write code to ensure that the Logger class follows the Singleton design pattern.
4.	Test the Singleton Implementation:
Create a test class to verify that only one instance of Logger is created and used across the application.


Step 1: Create a New Java Project
Project Name: SingletonPatternExample

Step 2 & 3: Define and Implement Singleton Class (Logger.java)
package SingletonPatternExample;
public class Logger 
{ 
    private static Logger instance;

    private Logger() 
    {
        System.out.println("Logger Initialized");
    }

    public static Logger getInstance() 
    {
        if (instance == null) 
        {
            instance = new Logger();
        }
        return instance;
    }

    public void log(String message) {
        System.out.println("Log: " + message);
    }
}

Step 4: Test Singleton Implementation (Main.java)
package SingletonPatternExample;
public class Main 
{
    public static void main(String[] args) 
    {
        Logger logger1 = Logger.getInstance();
        Logger logger2 = Logger.getInstance();

        logger1.log("First message");
        logger2.log("Second message");

        if (logger1 == logger2) 
        {
            System.out.println("Both logger instances are the same (Singleton works!)");
        } 
        else 
        {
            System.out.println("Different logger instances (Singleton failed!)");
        }
    }
}
Output:
Logger Initialized
Log: First message
Log: Second message
Both logger instances are the same (Singleton works!)





Exercise 2: Implementing the Factory Method Pattern

FACTORY METHOD PATTERN:

Exercise 2: Implementing the Factory Method Pattern
Scenario: 
You are developing a document management system that needs to create different types of documents (e.g., Word, PDF, Excel). Use the Factory Method Pattern to achieve this.
Steps:
1.	Create a New Java Project:
Create a new Java project named FactoryMethodPatternExample.
2.	Define Document Classes:
Create interfaces or abstract classes for different document types such as WordDocument, PdfDocument, and ExcelDocument.
3.	Create Concrete Document Classes:
Implement concrete classes for each document type that implements or extends the above interfaces or abstract classes.
4.	Implement the Factory Method:
Create an abstract class DocumentFactory with a method createDocument().
Create concrete factory classes for each document type that extends DocumentFactory and implements the createDocument() method.
5.	Test the Factory Method Implementation:
Create a test class to demonstrate the creation of different document types using the factory method.

Step 1: Create a New Java Project
Project Name: FactoryMethodPatternExample

Step 2: Define Document Classes
public interface Document {
    void open();
}

Step 3: Create Concrete Document Classes
public class WordDocument implements Document {
    public void open() {
        System.out.println("Opening Word Document");
    }
}
public class PdfDocument implements Document {
    public void open() {
        System.out.println("Opening PDF Document");
    }
}
public class ExcelDocument implements Document {
    public void open() {
        System.out.println("Opening Excel Document");
    }
}

Step 4: Implement the factory Method
public abstract class DocumentFactory {
    public abstract Document createDocument();
}
public class WordDocumentFactory extends DocumentFactory {
    public Document createDocument() {
        return new WordDocument();
    }
}
public class PdfDocumentFactory extends DocumentFactory {
    public Document createDocument() {
        return new PdfDocument();
    }
}
public class ExcelDocumentFactory extends DocumentFactory {
    public Document createDocument() {
        return new ExcelDocument();
    }
}

Step 5: Test the Factory Method Implementation
public class FactoryTest {
    public static void main(String[] args) {
        DocumentFactory wordFactory = new WordDocumentFactory();
        Document word = wordFactory.createDocument();
        word.open();

        DocumentFactory pdfFactory = new PdfDocumentFactory();
        Document pdf = pdfFactory.createDocument();
        pdf.open();

        DocumentFactory excelFactory = new ExcelDocumentFactory();
        Document excel = excelFactory.createDocument();
        excel.open();
    }
}

Output:
Opening Word Document
Opening PDF Document
Opening Excel Document









